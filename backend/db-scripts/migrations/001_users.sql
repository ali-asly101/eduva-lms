-- ==========================================
-- Enable UUIDs for primary keys
-- ==========================================
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- ==========================================
-- ROLE-SPECIFIC TABLES (contain actual user data)
-- ==========================================

CREATE TABLE IF NOT EXISTS students (
  id            UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  student_id    TEXT NOT NULL UNIQUE,          -- auto-generated by trigger
  email         TEXT NOT NULL UNIQUE,
  title         TEXT NOT NULL, -- title
  password_hash TEXT,
  first_name     TEXT NOT NULL,
  last_name     TEXT NOT NULL,
  created_at    TIMESTAMP NOT NULL DEFAULT now()
);

CREATE TABLE IF NOT EXISTS instructors (
  id            UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  instructor_id TEXT NOT NULL UNIQUE,          -- auto-generated by trigger
  email         TEXT NOT NULL UNIQUE,
  title         TEXT NOT NULL, -- title
  password_hash TEXT,
  first_name     TEXT NOT NULL,
  last_name     TEXT NOT NULL,
  created_at    TIMESTAMP NOT NULL DEFAULT now()
);

CREATE TABLE IF NOT EXISTS admins (
  id            UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email         TEXT NOT NULL UNIQUE,
      title         TEXT NOT NULL, -- title

  password_hash TEXT,
  first_name     TEXT NOT NULL,
  last_name     TEXT NOT NULL,
  created_at    TIMESTAMP NOT NULL DEFAULT now()
);

-- ==========================================
-- USERS VIEW (unified view of all user types)
-- ==========================================
DROP VIEW IF EXISTS users;

CREATE VIEW users AS
  SELECT 
    s.id,
    'student'::TEXT AS role,
    s.student_id::TEXT AS user_identifier,
    s.email,
    s.title,
    s.first_name,
    s.last_name,
    s.created_at,
    s.student_id AS student_ref,
    NULL::UUID   AS instructor_ref,
    NULL::UUID   AS admin_ref
  FROM students s

  UNION ALL

  SELECT 
    i.id,
    'instructor'::TEXT AS role,
    i.id::TEXT AS user_identifier,
    i.email,
    i.title,
    i.first_name,
    i.last_name,
    i.created_at,
    NULL::TEXT  AS student_ref,
    i.id        AS instructor_ref,
    NULL::UUID  AS admin_ref
  FROM instructors i

  UNION ALL

  SELECT 
    a.id,
    'admin'::TEXT AS role,
    a.id::TEXT AS user_identifier,
    a.email,
    a.title,
    a.first_name,
    a.last_name,
    a.created_at,
    NULL::TEXT  AS student_ref,
    NULL::UUID  AS instructor_ref,
    a.id        AS admin_ref
  FROM admins a;

-- ==========================================
-- INDEXES on base tables
-- ==========================================
CREATE INDEX IF NOT EXISTS idx_students_email       ON students(email);
CREATE INDEX IF NOT EXISTS idx_instructors_email    ON instructors(email);
CREATE INDEX IF NOT EXISTS idx_admins_email         ON admins(email);
CREATE INDEX IF NOT EXISTS idx_students_student_id  ON students(student_id);

-- ==========================================
-- AUTO-GENERATE STUDENT_ID
-- ==========================================
CREATE SEQUENCE IF NOT EXISTS student_id_seq START 1000000;

CREATE OR REPLACE FUNCTION generate_student_id()
RETURNS TRIGGER AS $$
BEGIN
  NEW.student_id := 'S' || lpad(nextval('student_id_seq')::text, 7, '0');
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS trg_generate_student_id ON students;
CREATE TRIGGER trg_generate_student_id
  BEFORE INSERT ON students
  FOR EACH ROW
  EXECUTE FUNCTION generate_student_id();


  CREATE SEQUENCE IF NOT EXISTS instructor_id_seq START 1000000;

CREATE OR REPLACE FUNCTION generate_instructor_id()
RETURNS TRIGGER AS $$
BEGIN
  NEW.instructor_id := 'I' || lpad(nextval('instructor_id_seq')::text, 7, '0');
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS trg_generate_instructor_id ON instructors;
CREATE TRIGGER trg_generate_instructor_id
  BEFORE INSERT ON instructors
  FOR EACH ROW
  EXECUTE FUNCTION generate_instructor_id();

